import pandas as pd
from sklearn.datasets import load_digits

dataset = load_digits()
dataset.keys()

dataset.data

# for visualising data
# convert the numpy array into 2D form 

dataset.data[0].reshape(8, 8)

import matplotlib.pyplot as plt 
%matplotlib inline

plt.gray()
plt.matshow(dataset.data[1].reshape(8, 8))

df = pd.DataFrame(dataset.data, columns=dataset.feature_names)

df.head()

# 0_0: 0th row, 0th pixel

df.describe()

# scaling

X = df
y = dataset.target

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=10)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)
model.score(X_test, y_test)

from sklearn.decomposition import PCA 

# retain 95% of important features 
pca = PCA(0.90)
X_pca = pca.fit_transform(X_scaled)

print(X_pca.shape)
print(X_scaled.shape)

# we can see PCA got rid of 24 cols 

print("Eigen Vectors =\n", pca.components_)
print("\nCo-variance matrix =\n", pca.explained_variance_)

# to see the importance of PCA
# we will train the Logistic Reg model using PCA dataset

X_train, X_test, y_train, y_test = train_test_split(
    X_pca, y, test_size=0.2, random_state=10)

pca_model = LogisticRegression(max_iter=1000)
pca_model.fit(X_train, y_train)
pca_model.score(X_test, y_test)

# the accuracy is almost similar i.e 96.94 vs 96.11
# Accuracy will be low since info is redduced the advantage is the computation was fast 